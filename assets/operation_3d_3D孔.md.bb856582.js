import{_ as t,o,c as r,Q as n}from"./chunks/framework.6ed370c1.js";const u=JSON.parse('{"title":"3D孔","description":"","frontmatter":{},"headers":[],"relativePath":"operation/3d/3D孔.md","filePath":"operation/3d/3D孔.md"}'),l={name:"operation/3d/3D孔.md"},a=n('<h1 id="_3d孔" tabindex="-1">3D孔 <a class="header-anchor" href="#_3d孔" aria-label="Permalink to &quot;3D孔&quot;">​</a></h1><h2 id="算子功能" tabindex="-1">算子功能 <a class="header-anchor" href="#算子功能" aria-label="Permalink to &quot;算子功能&quot;">​</a></h2><p>寻找所有具有孔形状的点云特征点，可以通过对孔特征点的属性进行设置，从而对孔进行过滤。在找到孔特征点后，通过不同的算法拟合出3D圆形，输出3D圆形的圆心坐标。</p><h2 id="算子输入参数" tabindex="-1">算子输入参数 <a class="header-anchor" href="#算子输入参数" aria-label="Permalink to &quot;算子输入参数&quot;">​</a></h2><ul><li><p><strong>输入图像</strong>：图像来源的寄存器编号</p></li><li><p><strong>3D区域</strong>：从寄存器获取区域或手动设置区域</p></li><li><p><strong>孔特征点</strong>：</p><ul><li><strong>k近邻数量</strong>：在每一个查询点附近需要搜索的点数量</li><li><strong>最小聚类大小</strong>：每一个孔需要包含的最小特征点数量</li><li><strong>搜索半径</strong>：在每一个查询点附近的球形搜索半径，只搜索半径范围内的点</li><li><strong>最大搜索数量</strong>：在搜索半径范围内搜索得到的最大点数量</li><li><strong>椭圆拟合误差阈值</strong>：计算每一个孔特征点拟合出来的椭圆拟合误差，根据此误差值对孔进行筛选，若误差值大于此阈值，则被舍弃。</li><li><strong>椭圆拟合长短轴误差容限</strong>：根据由特征点拟合出的椭圆长短轴之比对孔进行筛选，保留更接近圆形的孔</li></ul></li><li><p><strong>孔拟合</strong>：</p><ul><li><strong>算法</strong>：RANSAC</li></ul></li><li><p><strong>RANSAC</strong>：</p><ul><li><strong>距离阈值</strong>：该算法会首先随机选取若干点进行一次3D圆拟合，假设此次拟合为最佳拟合，然后用剩下的所有点对此次拟合结果进行检验：分别计算点到该圆模型的距离，距离值小于阈值的点被称为局内点，反之称为局外点；若局内点的数量大于最小阈值，则当前模型被认为时最佳模型，停止迭代，否则继续迭代。</li><li><strong>最大迭代次数</strong>：若超过最大迭代次数还未得到最佳模型，则停止迭代。</li></ul></li></ul>',5),i=[a];function s(e,_,g,d,p,c){return o(),r("div",null,i)}const D=t(l,[["render",s]]);export{u as __pageData,D as default};
