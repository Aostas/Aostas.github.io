import{_ as a,v as p,b as e,R as s}from"./chunks/framework.eea9f507.js";const t="/docs/assets/捕捉图像.fda46ef9.jpeg",r="/docs/assets/脚本Initial.e474264c.jpeg",o="/docs/assets/文件路径.ac89e035.jpeg",i="/docs/assets/转换滤波器.c325eb95.jpeg",n="/docs/assets/求中间值脚本.4f966061.jpeg",c="/docs/assets/3D区域.71f0ca16.jpeg",l="/docs/assets/离群值预处理.278dc74e.jpeg",b="/docs/assets/3D斑点.1d8262b4.jpeg",d="/docs/assets/setblob脚本.93004e56.jpeg",h="/docs/assets/方形探针.7dec7cc0.jpeg",_="/docs/assets/几何命令.8786a243.jpeg",m="/docs/assets/3D高度.66ccd110.jpeg",u="/docs/assets/judge脚本.2c7194e4.jpeg",g="/docs/assets/方形探针2.0dec1404.jpeg",D="/docs/assets/3D布局.2dd041b3.jpeg",q="/docs/assets/save脚本.9c6f365d.jpeg",N=JSON.parse('{"title":"196pin示例","description":"","frontmatter":{},"headers":[],"relativePath":"project/196pin/196pin.md","filePath":"project/196pin/196pin.md"}'),f={name:"project/196pin/196pin.md"},x=s('<h1 id="_196pin示例" tabindex="-1">196pin示例 <a class="header-anchor" href="#_196pin示例" aria-label="Permalink to &quot;196pin示例&quot;">​</a></h1><h2 id="一、预操作" tabindex="-1">一、预操作 <a class="header-anchor" href="#一、预操作" aria-label="Permalink to &quot;一、预操作&quot;">​</a></h2><h3 id="_1-图像采集" tabindex="-1">1.图像采集 <a class="header-anchor" href="#_1-图像采集" aria-label="Permalink to &quot;1.图像采集&quot;">​</a></h3><p>[00] 捕捉图像算子，选择读取图像，形式为单独文件并为其选择图像的正确路径。<br></p><p><img src="'+t+'" alt="本地图片"></p><h3 id="_2-全局变量及配方读取" tabindex="-1">2.全局变量及配方读取 <a class="header-anchor" href="#_2-全局变量及配方读取" aria-label="Permalink to &quot;2.全局变量及配方读取&quot;">​</a></h3><p>[01] Initial脚本清空全局变量，并初始化接下来会用到的全局变量。<br></p><p><img src="'+r+'" alt="本地图片"><br></p><p>[02] 通过脚本读出配方文件的路径及名称。<br></p><p><img src="'+o+'" alt="本地图片"></p><h2 id="二、pcb右边部分" tabindex="-1">二、pcb右边部分 <a class="header-anchor" href="#二、pcb右边部分" aria-label="Permalink to &quot;二、pcb右边部分&quot;">​</a></h2><h3 id="_1-图像预处理" tabindex="-1">1.图像预处理 <a class="header-anchor" href="#_1-图像预处理" aria-label="Permalink to &quot;1.图像预处理&quot;">​</a></h3><p>[04-05]通过切割算子将IM0复制到IM1中并使用转换滤波器算子将图像绕Z轴逆时针旋转90度。<br></p><p><img src="'+i+'" alt="本地图片"><br></p><p>[07-10]通过四个方形探针找到右半部分的四个顶点并将其坐标输入到3D寄存器中。<br></p><p><img src="'+n+'" alt="本地图片"><br></p><p>[11-12] 通过脚本得到右半部分的中心点坐标并写入3D寄存器中并通过3D位置调整算子，以该中心点的x，y坐标为原点。<br></p><p>[13-14]通过3D区域算子与3D平面算子来拟合出一个z为0的平面并转换点云。<br></p><p><img src="'+c+'" alt="本地图片"><br></p><p>[16-17]通过切割算子将右半边的针脚切割并保存至IM2中，并通过离散值删除预处理算子去除点云图中干扰的点。<br></p><p><img src="'+l+'" alt="本地图片"><br></p><p>[18-19]通过方形探针算子找到一条x轴方向上的直线并将其值返回到3D寄存器中。3D位置调整算子通过这条直线来调整点云。</p><h3 id="_2-测量判断" tabindex="-1">2.测量判断 <a class="header-anchor" href="#_2-测量判断" aria-label="Permalink to &quot;2.测量判断&quot;">​</a></h3><p>[21-22]通过3D斑点算子来确认行数，标上行号并把每一行第一个值存入3D寄存器中。并通过脚本读取存入3D寄存器中的每行第一个针脚的坐标并将其赋予&quot;PCB_Start1/2/3/4/5&quot;以便下面使用。<br></p><p><img src="'+b+'" alt="本地图片"><br></p><p>[23-25]设置一个标记loop Column用来循环，通过脚本读取每行第一个点的坐标，设置一个标记loop pin用来循环。<br></p><p>[26-30]设置脚本，为下面的算子参数赋值。几何命令算子用来创造一个盒子可视化针脚，3D高度算子可以测出针脚高度并存入寄存器中，SinglePin1测出当前阵脚的中心点坐标并存入寄存器中，SinglePin2测出下一个针脚的中心点坐标并存入寄存器中。<br></p><p><img src="'+d+'" alt="本地图片"><br></p><p>[32-37]通过judge result脚本来判断针脚的高度与针脚的sidex/y/height是否满足条件，如果满足条件就在3D布局pcbHeight与3D布局nearpinresult输出绿色的OK。脚本set display可以确定字体的大小以及位置。脚本count+1用来循环，继续下一个针脚的测量。如果一行没结束就跳转到loop pin继续往下执行，如果一行结束，列没有结束，就跳转到loop Column继续执行。如果全部执行完毕，就跳转到None继续往下执行。</p><h2 id="三、pcb左边部分" tabindex="-1">三、pcb左边部分 <a class="header-anchor" href="#三、pcb左边部分" aria-label="Permalink to &quot;三、pcb左边部分&quot;">​</a></h2><h3 id="_1-图像预处理-1" tabindex="-1">1.图像预处理 <a class="header-anchor" href="#_1-图像预处理-1" aria-label="Permalink to &quot;1.图像预处理&quot;">​</a></h3><p>[39-40]通过切割算子将IM0复制到IM3中并使用转换滤波器将图像绕Z轴逆时针旋转90度。<br></p><p>[42-45]通过四个方形探针找到左半部分的四个顶点并将其坐标输入到3D寄存器中。<br></p><p>[46-47]通过脚本得到左半部分的中心点坐标并写入3D寄存器中。通过3D位置调整算子，以该中心点的x，y坐标为原点。<br></p><p>[48-49]通过3D区域算子与3D平面算子来拟合出一个z为0的平面并转换点云。<br></p><h3 id="_2-测量判断-1" tabindex="-1">2.测量判断 <a class="header-anchor" href="#_2-测量判断-1" aria-label="Permalink to &quot;2.测量判断&quot;">​</a></h3><h4 id="左半部分" tabindex="-1">左半部分 <a class="header-anchor" href="#左半部分" aria-label="Permalink to &quot;左半部分&quot;">​</a></h4><p>[51-52]通过切割算子将左半边的针脚切割并保存至IM4中，并通过离散值删除预处理算子去除点云图中干扰的点。<br></p><p>[53-54]通过方形探针算子找到一条x轴方向上的直线并将其值返回到3D寄存器中。3D位置调整算子通过这条直线来调整点云。<br></p><p><img src="'+h+'" alt="本地图片"><br></p><p>[56-57]通过3D斑点算子来确认行数，标上行号并把每一行第一个值存入3D寄存器中。通过脚本读取存入3D寄存器中的每行第一个针脚的坐标并将其赋予&quot;PCB_Start1/2/3/4/5&quot;以便下面使用。<br></p><p>[58-60]设置一个标记loop Column2用来循环。通过脚本读取每行第一个点的坐标。设置一个标记loop pin2用来循环。<br></p><p>[61-65]设置脚本，为下面的算子参数赋值。几何命令算子用来创造一个盒子可视化针脚，3D高度算子可以测出针脚高度并存入寄存器中，SinglePin11测出当前阵脚的中心点坐标并存入寄存器中，SinglePin22测出下一个针脚的中心点坐标并存入寄存器中。<br></p><p><img src="'+_+'" alt="本地图片"><br></p><p><img src="'+m+'" alt="本地图片"><br></p><p>[67-72]通过judge result脚本来判断针脚的高度与针脚的sidex/y/height是否满足条件，如果满足条件就在3D布局pcbHeight2与3D布局nearpinresult2输出绿色的OK。脚本set display可以确定字体的大小以及位置。脚本count+1用来循环，继续下一个针脚的测量。如果一行没结束就跳转到loop pin2继续往下执行，如果一行结束，列没有结束，就跳转到loop Column2继续执行。如果全部执行完毕，就跳转到None2继续往下执行。<br></p><p><img src="'+u+'" alt="本地图片"><br></p><h4 id="右半部分" tabindex="-1">右半部分 <a class="header-anchor" href="#右半部分" aria-label="Permalink to &quot;右半部分&quot;">​</a></h4><p>[74-75]通过切割算子将左半边的针脚切割并保存至IM5中，并通过离散值删除预处理算子去除点云图中干扰的点。<br></p><p>[76-77]通过方形探针算子找到一条x轴方向上的直线并将其值返回到3D寄存器中。3D位置调整算子通过这条直线来调整点云。<br></p><p>[79-80]通过3D斑点算子来确认行数，标上行号并把每一行第一个值存入3D寄存器中。通过脚本读取存入3D寄存器中的每行第一个针脚的坐标并将其赋予&quot;PCB_Start1/2/3/4/5&quot;以便下面使用。<br> [81-83]设置一个标记loop Column3用来循环。通过脚本读取每行第一个点的坐标。设置一个标记loop pin3用来循环。<br></p><p>[84-88]设置脚本，为下面的算子参数赋值。几何命令算子用来创造一个盒子可视化针脚，3D高度算子可以测出针脚高度并存入寄存器中，SinglePin111测出当前阵脚的中心点坐标并存入寄存器中，SinglePin22测出下一个针脚的中心点坐标并存入寄存器中。<br></p><p><img src="'+g+'" alt="本地图片"><br></p><p>[90-95]通过judge result脚本来判断针脚的高度与针脚的sidex/y/height是否满足条件，如果满足条件就在3D布局pcbHeight3与3D布局nearpinresult3输出绿色的OK。脚本set display可以确定字体的大小以及位置。脚本count+1用来循环，继续下一个针脚的测量。如果一行没结束就跳转到loop pin3继续往下执行，如果一行结束，列没有结束，就跳转到loop Column2继续执行。如果全部执行完毕，就跳转到None3继续往下执行。<br></p><p><img src="'+D+'" alt="本地图片"><br></p><h2 id="四、数据保存" tabindex="-1">四、数据保存 <a class="header-anchor" href="#四、数据保存" aria-label="Permalink to &quot;四、数据保存&quot;">​</a></h2><p>[97]通过脚本将高度，针脚的x，y坐标分别输出并存储在三个不同的csv文件中。<br></p><p><img src="'+q+'" alt="本地图片"><br></p>',58),P=[x];function j(k,S,y,C,I,M){return p(),e("div",null,P)}const O=a(f,[["render",j]]);export{N as __pageData,O as default};
