import{_ as l,o as i,c as t,Q as o}from"./chunks/framework.879a0371.js";const p=JSON.parse('{"title":"3D斑点","description":"","frontmatter":{},"headers":[],"relativePath":"operation/3d/3D斑点.md","filePath":"operation/3d/3D斑点.md"}'),r={name:"operation/3d/3D斑点.md"},a=o('<h1 id="_3d斑点" tabindex="-1">3D斑点 <a class="header-anchor" href="#_3d斑点" aria-label="Permalink to &quot;3D斑点&quot;">​</a></h1><h2 id="算子功能" tabindex="-1">算子功能 <a class="header-anchor" href="#算子功能" aria-label="Permalink to &quot;算子功能&quot;">​</a></h2><p>在输入的点云区域中寻找3D点聚类团，这些聚类团被称为斑点，输出所有选择斑点的中心点以及斑点中的点集。</p><h2 id="算子输入参数" tabindex="-1">算子输入参数 <a class="header-anchor" href="#算子输入参数" aria-label="Permalink to &quot;算子输入参数&quot;">​</a></h2><ul><li><strong>输入图像</strong>：图像来源的寄存器编号</li><li><strong>算法</strong>： <ul><li>欧式聚类</li></ul></li><li><strong>欧式聚类</strong>： <ul><li>最大距离阈值：区分两个不同斑点间的距离阈值</li><li>斑点包含最少点数：每一个斑点中需要包含的最少点数，可以对斑点进行过滤。</li><li>斑点包含最多点数：每一个斑点中需要包含的最多点数，可以对斑点进行过滤。</li></ul></li><li><strong>输出设置</strong>： <ul><li><strong>排序方式</strong>： <ul><li>不排序</li><li>点数：根据每一个斑点中包含的点数对斑点进行排序</li><li>X：根据每一个斑点的质心X坐标，对斑点进行排序。</li><li>Y：根据每一个斑点的质心Y坐标，对斑点进行排序。</li><li>Z：根据每一个斑点的质心Z坐标，对斑点进行排序。</li></ul></li><li><strong>排序方向</strong>： <ul><li>降序</li><li>升序</li></ul></li><li><strong>最大输出斑点个数</strong>：限制输出斑点的最多数量</li><li><strong>输出到寄存器的最大斑点个数</strong>：限制输出到寄存器的最大斑点个数</li><li><strong>输出斑点中心点到寄存器</strong>：使能按钮，若启用，则将斑点中心输出到寄存器。</li><li><strong>将斑点区域输出到寄存器</strong>：使能按钮，若启用，则将所有斑点区域点集输出到寄存器。</li></ul></li><li><strong>输出图像</strong>：图像输出的寄存器编号</li></ul>',5),e=[a];function n(s,_,d,c,g,u){return i(),t("div",null,e)}const m=l(r,[["render",n]]);export{p as __pageData,m as default};
