import{_ as t,o as d,c as r,Q as o}from"./chunks/framework.6ed370c1.js";const l=JSON.parse('{"title":"常用函数","description":"","frontmatter":{},"headers":[],"relativePath":"script/常用函数.md","filePath":"script/常用函数.md"}'),a={name:"script/常用函数.md"},e=o('<h1 id="常用函数" tabindex="-1">常用函数 <a class="header-anchor" href="#常用函数" aria-label="Permalink to &quot;常用函数&quot;">​</a></h1><h2 id="基础函数" tabindex="-1">基础函数 <a class="header-anchor" href="#基础函数" aria-label="Permalink to &quot;基础函数&quot;">​</a></h2><table><thead><tr><th>函数名</th><th>函数功能示例</th></tr></thead><tbody><tr><td>type(v)</td><td>用来判断v的类型, 返回字符串&quot;nil&quot;, &quot;number&quot;, &quot;string&quot;, &quot;boolean&quot;, &quot;table&quot;, &quot;function&quot;, &quot;thread&quot;, &quot;userdata&quot;</td></tr><tr><td>tonumber(e [,base])</td><td>将字符串转换成数字，把e(必须为数字或者是可以转成数字的字符串)转成10进制数字，base为多少进制(可以为2-36)，默认为10tonumber(&#39;10&#39;)10</td></tr><tr><td>tostring(var)</td><td>将变量转换成字符串，把任意类型的e已适当的方式转成字符串，如果e的原表有__tostring函数，则调用并传入e作为参数，把返回值作为结果返回。math.asin(0.5)0.52359877</td></tr><tr><td>isboolean(var)</td><td>检查是否为boolean类型</td></tr><tr><td>isnil(var)</td><td>检查是否为nil</td></tr><tr><td>isstring(var)</td><td>检查是否为字符串类型</td></tr><tr><td>isinteger(var)</td><td>检查是否为整数类型</td></tr></tbody></table><h2 id="数学函数" tabindex="-1">数学函数 <a class="header-anchor" href="#数学函数" aria-label="Permalink to &quot;数学函数&quot;">​</a></h2><table><thead><tr><th>函数名</th><th>函数功能</th><th>示例</th><th>示例结果</th></tr></thead><tbody><tr><td>abs</td><td>取绝对值</td><td>math.abs(-15)</td><td>15</td></tr><tr><td>acos</td><td>反余弦函数</td><td>math.acos(0.5)</td><td>1.04719755</td></tr><tr><td>asin</td><td>反正弦函数</td><td>math.asin(0.5)</td><td>0.52359877</td></tr><tr><td>atan2</td><td>x / y的反正切值</td><td>math.atan2(90.0, 45.0)</td><td>1.10714871</td></tr><tr><td>atan</td><td>反正切函数</td><td>math.atan(0.5)</td><td>0.4636476095</td></tr><tr><td>ceil</td><td>不小于x的最大整数</td><td>math.ceil(5.8)</td><td>6</td></tr><tr><td>cosh</td><td>双曲线余弦函数</td><td>math.cosh(0.5)</td><td>1.276259652</td></tr><tr><td>cos</td><td>余弦函数</td><td>math.cos(0.5)</td><td>0.87758256</td></tr><tr><td>deg</td><td>弧度转角度</td><td>math.deg(math.pi)</td><td>180</td></tr><tr><td>exp</td><td>计算以e为底x次方值</td><td>math.exp(2)</td><td>2.718281828</td></tr><tr><td>floor</td><td>不大于x的最大整数</td><td>math.floor(5.6)</td><td>5</td></tr><tr><td>fmod (mod)</td><td>取模运算</td><td>math.mod(14, 5)</td><td>4</td></tr><tr><td>frexp</td><td>把双精度数val分解为数字部分（尾数）和以2为底的指数n，即val=x*2n</td><td>math.frexp(10.0)</td><td>0.625 4</td></tr><tr><td>ldexp</td><td>计算value * 2的n次方</td><td>math.ldexp(10.0, 3)</td><td>80 = 10 * (2 ^3)</td></tr><tr><td>log10</td><td>计算以10为基数的对数</td><td>math.log10(100)</td><td>2</td></tr><tr><td>log</td><td>计算一个数字的自然对数</td><td>math.log(2.71)</td><td>0.9969</td></tr><tr><td>max</td><td>取得参数中最大值</td><td>math.max(2.71, 100, -98, 23)</td><td>100</td></tr><tr><td>min</td><td>取得参数中最小值</td><td>math.min(2.71, 100, -98, 23)</td><td>-98</td></tr><tr><td>modf</td><td>把数分为整数和小数</td><td>math.modf(15.98)</td><td>15 98</td></tr><tr><td>pow</td><td>把数分为整数和小数</td><td>math.pow(2, 5)</td><td>32</td></tr><tr><td>rad</td><td>角度转弧度</td><td>math.rad(180)</td><td>3.141592654</td></tr><tr><td>random</td><td>获取随机数</td><td>math.random(1, 100)</td><td>在使用math.random函数之前必须使用此函数设置随机数种子</td></tr><tr><td>randomseed</td><td>设置随机数种子</td><td>math.randomseed(os.time())</td><td>0.5210953</td></tr><tr><td>sinh</td><td>双曲线正弦函数</td><td>math.sinh(0.5)</td><td>0.5</td></tr><tr><td>sin</td><td>正弦函数</td><td>math.sin(math.rad(30))</td><td>15</td></tr><tr><td>sqrt</td><td>开平方函数</td><td>math.sqrt(16)</td><td>4</td></tr><tr><td>tanh</td><td>双曲线正切函数</td><td>math.tanh(0.5)</td><td>0.46211715</td></tr><tr><td>tan</td><td>正切函数</td><td>math.tan(0.5)</td><td>0.5463024</td></tr></tbody></table><h3 id="字符串函数" tabindex="-1">字符串函数 <a class="header-anchor" href="#字符串函数" aria-label="Permalink to &quot;字符串函数&quot;">​</a></h3><table><thead><tr><th>序号</th><th>方法 &amp; 用途</th></tr></thead><tbody><tr><td>1</td><td>string.upper(argument):<br>字符串全部转为大写字母。</td></tr><tr><td>2</td><td>string.lower(argument):<br>字符串全部转为小写字母。</td></tr><tr><td>3</td><td>string.gsub(mainString,findString,replaceString,num)<br>在字符串中替换。<br>mainString 为要操作的字符串， findString 为被替换的字符，replaceString 要替换的字符，num 替换次数（可以忽略，则全部替换），如：<br><code>string.gsub(&quot;aaaa&quot;,&quot;a&quot;,&quot;z&quot;,3);</code><br><code>zzza    3</code></td></tr><tr><td>4</td><td>string.find (str, substr, [init, [plain]])<br>在一个指定的目标字符串 str 中搜索指定的内容 substr，如果找到了一个匹配的子串，就会返回这个子串的起始索引和结束索引，不存在则返回 nil。<br>init 指定了搜索的起始位置，默认为 1，可以一个负数，表示从后往前数的字符个数。<br>plain 表示是否使用简单模式，默认为 false，true 只做简单的查找子串的操作，false 表示使用使用正则模式匹配。<br>以下实例查找字符串 &quot;Lua&quot; 的起始索引和结束索引位置：<br><code>string.find(&quot;Hello Lua user&quot;, &quot;Lua&quot;, 1)</code><br><code>7 9</code></td></tr><tr><td>5</td><td>string.reverse(arg)<br>字符串反转<br><code>string.reverse(&quot;Lua&quot;)</code><br><code>auL</code></td></tr><tr><td>6</td><td>string.format(...)<br>返回一个类似printf的格式化字符串<br><code>string.format(&quot;the value is:%d&quot;,4)</code><br><code>the value is:4</code></td></tr><tr><td>7</td><td>string.char(arg) 和 string.byte(arg[,int])<br>char 将整型数字转成字符并连接， byte 转换字符为整数值(可以指定某个字符，默认第一个字符)<br><code>string.char(97,98,99,100)</code><br><code>abcd</code><br><code>string.byte(&quot;ABCD&quot;,4)</code><br><code>68</code><br><code>string.byte(&quot;ABCD&quot;)</code><br><code>65</code></td></tr><tr><td>8</td><td>string.len(arg)<br>计算字符串长度<br><code>string.len(&quot;abc&quot;)</code><br><code>3</code></td></tr><tr><td>9</td><td>string.rep(string, n)<br>返回字符串string的n个拷贝<br><code>string.rep(&quot;abcd&quot;,2)</code><br><code>abcdabcd</code></td></tr><tr><td>10</td><td>..<br>链接两个字符串<br><code>print(&quot;www.ai-v&quot;..&quot;ision.com&quot;)</code><br><code>www.ai-vision.com</code></td></tr><tr><td>11</td><td>string.gmatch(str, pattern)<br>返回一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串。如果参数 pattern 描述的字符串没有找到，迭代函数返回nil<br><code>for word in string.gmatch(&quot;Hello ai vision&quot;, &quot;%a+&quot;) do print(word) end</code><br><code>Hello</code><br><code>ai</code><br><code>vision</code></td></tr><tr><td>12</td><td>string.match(str, pattern, init)<br>string.match()只寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认为1。<br>在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串. 当没有成功的配对时, 返回nil<br><code>string.match(&quot;I have 2 questions for you.&quot;, &quot;%d+ %a+&quot;)</code><br><code>2 questions</code><br><code>string.format(&quot;%d, %q&quot;, string.match(&quot;I have 2 questions for you.&quot;, &quot;(%d+) (%a+)&quot;))</code><br><code>2, &quot;questions&quot;</code></td></tr></tbody></table>',7),n=[e];function i(s,c,u,h,b,m){return d(),r("div",null,n)}const g=t(a,[["render",i]]);export{l as __pageData,g as default};
