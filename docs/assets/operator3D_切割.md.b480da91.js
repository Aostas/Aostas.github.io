import{_ as a,v as e,b as r,R as t}from"./chunks/framework.eea9f507.js";const b=JSON.parse('{"title":"切割","description":"","frontmatter":{},"headers":[],"relativePath":"operator3D/切割.md","filePath":"operator3D/切割.md"}'),o={name:"operator3D/切割.md"},i=t('<h1 id="切割" tabindex="-1">切割 <a class="header-anchor" href="#切割" aria-label="Permalink to &quot;切割&quot;">​</a></h1><h2 id="算子功能" tabindex="-1">算子功能 <a class="header-anchor" href="#算子功能" aria-label="Permalink to &quot;算子功能&quot;">​</a></h2><p>根据输入的切割模式、切割范围、切割选项，输出切割后的点云</p><h2 id="算子输入参数" tabindex="-1">算子输入参数 <a class="header-anchor" href="#算子输入参数" aria-label="Permalink to &quot;算子输入参数&quot;">​</a></h2><h3 id="切割模式" tabindex="-1">切割模式 <a class="header-anchor" href="#切割模式" aria-label="Permalink to &quot;切割模式&quot;">​</a></h3><ul><li>X范围：根据点云的X坐标进行切割</li><li>Y范围：根据点云的Y坐标进行切割</li><li>Z范围：根据点云的z坐标进行切割</li></ul><h3 id="翻转切割" tabindex="-1">翻转切割 <a class="header-anchor" href="#翻转切割" aria-label="Permalink to &quot;翻转切割&quot;">​</a></h3><p>若勾选，则对输入值进行取反操作。</p><h3 id="缩小有序点云以适应" tabindex="-1">缩小有序点云以适应 <a class="header-anchor" href="#缩小有序点云以适应" aria-label="Permalink to &quot;缩小有序点云以适应&quot;">​</a></h3><p>若勾选，则去除点云中的无效点（暂未实现）</p><h3 id="目的地" tabindex="-1">目的地 <a class="header-anchor" href="#目的地" aria-label="Permalink to &quot;目的地&quot;">​</a></h3><p>将切割之后的点云显示在相应的界面中。</p>',12),l=[i];function h(s,n,d,c,p,u){return e(),r("div",null,l)}const f=a(o,[["render",h]]);export{b as __pageData,f as default};
